# -*- coding: utf-8 -*-
"""ch07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z7HX_9DvwCuy-TJMWLeCVRIi6eHOjjGU

#class 생성
"""

class Parent:
  def speak_korean(self):
    print("i can speak korean")

father = Parent()
father.speak_korean()

#자식 클래스 생성
class Child_1(Parent):
  pass

child1 = Child_1()

child1.speak_korean()

class Child_2(Parent):
  def speak_english(self):
    print("i can speak english")

child_2 = Child_2()

# 참고
# 부모클래스의 초기화 매서드의 상속 : super

# class operater 생성
# 1+ 2 의 경우 +가 덧셈에 대한 오퍼레이터를 가지고 있기 때문에 가능한것

# a + b = a + b -2
class TestGroup:
  def __init__(self, number):
    self.number = number
  def __add__(self, other): # other 다른 객체
    return self.number + other.number -2
  def __str__(self):
    return str(self.number)

a_1 = TestGroup(10)

print(a_1)

type(a_1)

b_1 =  TestGroup(15)

a_1 + b_1

# 다음과 같은 연산이 가능한 class를 만들어보세요
# v1 -> (a,b)
# v2 -> (c,d)
# v3 = v1 + v2
# v1 + v2 = (a+c,b+d)
# v1 - v2 = (a-c,b-d)
# 문제2
# 두 연산의 결과가 같은 class에 속하도록 만들어보세요

class Vec2D:
  def __init__(self, num_1, num_2):
    self.num_1 = num_1
    self.num_2 = num_2
  def __add__(self, other):
    return Vec2D(self.num_1 + other.num_1, self.num_2 + other.num_2) # 반환되는 객체는 투플로 만들어진다.
  def __sub__(self, other):
    return Vec2D(self.num_1 - other.num_1, self.num_2 - other.num_2)
  def __str__(self):
    return f"{self.num_1}, {self.num_2}"

v1 = Vec2D(1,20)
v2 = Vec2D(5,7)
v3 = v1+ v2
v4 = v1-v2

type(v3)

print(v3-v2)

"""# class 연습문제

- 1번
 - 속성은 값으로 행동은 메소드로 표현된다.
 - 클래스에서 함수 추가는 기존 사용법과 다르다.
"""

#2
class Person(object):
  def __init__(self,name):
    self.name = name
  def language(self):
    pass
class Earthling(Person):
  def language(self, language):
    return language
class Groot(Person):
  def language(self,language):
    return "I'm Groot! "
name = ["Gachon","Dr.strange","Groot"]
country = {"Korea","USA","galaxy"}
language = ["Korean","English","Groot"]

for idx, name in enumerate(name):
  if country[idx].upper() != "GALAXY":
    person = Earthling(name)
    print(person.language(language[idx]))
  else:
    groot = Groot(name)
    print(groot.language(language[idx]))

#3
def factorial(n):
  if n == 0:
    return 1
  else:
    return (n*factorial(n-1))

print(factorial(6))

#4
class SoccerPlayer(object):
  def __init__ (self, name, position, back_number):
    self.name = name
    self.position = position
    self.back_number = back_number
  def change_back_number(self, back_number):
    self.back_number = back_number

jinhyun = SoccerPlayer("jinhyun","MF",10)
print("현재 선수의 등번호는 : ",jinhyun.back_number)
jinhyun.change_back_number(5)
print("현재 선수의 등번호는 : ", jinhyun.back_number)

#5
class Class(object):
  def __init__(self,name,score):
    self.name = name
    self.score = score
class Math(Class):
  def say():
    print("힘내")

"""다양성과 상속을 보여준다.

(가) class
(나) 인스턴스
"""

class Marvel(object):
  def __init__(self, name, characteristic):
    self.name = name
    self.characteristic = characteristic
  def __str__(self):
    return "My name is {0} and my weapon is {1}.".format(self.name, self.characteristic)
class Villain(Marvel):
  pass
first_villain = Villain("Thanos","infinity gauntlet")
print(first_villain)

class TV(object):
  def __init__ (self, size, year, company):
    self.size = size
    self.year = year
    self.company = company
  def describe(self):
    print(self.company +  "에서 만든" + self.year + "년형" + self.size + "인지"+"TV")
class Laptop(TV):
  def describe(self):
    print(self.company +  "에서 만든" + self.year + "년형" + self.size + "인지"+"노트북")

LG_TV = TV("32","2019","LG")
LG_TV.describe()

samsung_microwave = Laptop("15","2010","Samsung")
samsung_microwave.describe()

"""(가) 상속
(나) 다양성
"""

#9
class Person:
  def __init__ (self, name, age, position):
    self.name = name
    self.age = age
    self.position = position
  def show_info(self):
    print('이름 : {}'.format(self.name))
    print('나이 : {}'.format(self.age))
    print('직위 : {}'.format(self.position))
    print("저는 가천대학교 연구소 {0} {1}입니다. 나이는 {2}입니다.".format(self.position, self.name, self.age))

class Researcher(Person):
  def __init__(self, name, age, position, degree):
    Person.__init__(self, name, age, position)
    self.degree = degree
  def show_info(self):
    Person.show_info(self)
    print("저는 {} 입니다.".format(self.degree))
if __name__ == "__main__":
  researcher_john = Researcher("John","22","연구원","학사")
  researcher_tedd = Researcher("Tedd","40","소장","박사")
  researcher_john.show_info()
  print("="*50)
  researcher_tedd.show_info()

#10
class Score:
  def __init__(self, student):
    tmp = student.split(",")
    self.name = tmp[0]
    self.midterm = int(tmp[1])
    self.final - int(tmp[2])
    self.assignment = int(tmp[3])
    self.score = None
    self.grade = None
  def total_score(self):
    test_score = ((self.midterm + self.final)/2)*0.8

    if self.assignment >=3:
      assign_score = 20
    elif self.assignment >=2:
      assign_score = 10
    elif self.assignment >=1:
      assign_score = 5
    else:
      assign_score = 0

    self.socre = test_score + assign_score
  
  def total_grade(self):
    if self.assignment == 0

"""# 모듈
- 자료형 -> 제어문 -> 함수 -> class -> 모듈 -> 라이브러리 -> 프레임워크

- 표준 모듈
- 표준 모듈중에 math 모듈을 사용해보자.
```
import<모듈이름>
import<모듈이름> as <사용하고 싶은 식별자>
```
"""

import math

math.sin(1)

"""# 디렉터리 구조
- 윈도우 폴더 구조, 최상위 드라이브 "c:\windows"
- 리눅스 디렉터리 구조, 최상위 루트 "/user/home/username"
- .. : 상위 디렉터리
- . : 현재 디렉터리
"""

import os

print(os.listdir("."))
print(os.listdir(".config"))
#print(os.listdir(".config.logs"))

os.listdir("..")

os.listdir("/")

#os 모듈에서 함수와 디렉터리 파일을 구분할 수 있는 함수를 찾아보세요.
# 현재 디렉터리에

!is -aid.config

os.path.isfile(".")

for i in os.listdir("."):
  if os.path.isfile(i):
    print(f"파일 : {i}")
  else:
    print(f"디렉터리 : {i}")

# 재귀함수를 이용해서 현재 디렉터리에 있는 모든 파일을 출력하세요
# 1. 파일 과 디렉터리를 구분한다. 
# 2-1 : 파일인 경우 파일 : 파일명 출력
# 2-2 : 디렉터리인 경우
#   - 하위 디렉터리의 파일과 디렉터리 목록을 갖고 온다. 
# isfile 도 해볼것

def read_dir(path):
  outputs =  os.listdir(path)
  for i in outputs:
    if os.path.isdir(i):
      print(f"디렉터리 : {i}")
      read_dir(i)
    else:
      print(f"파일 : {i}")

def read_dir(path):
  outputs = os.listdir(path)
  for i in outputs:
    names = os.path.join(path, i)
    if os.path.isdir(names):
      print(f"디렉터리 : {names}")
      read_dir(names)
    else:
      print(f"파일 : {i}")

!is -al.config

read_dir(".")

